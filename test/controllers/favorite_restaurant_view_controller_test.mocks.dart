// Mocks generated by Mockito 5.4.4 from annotations
// in restaurant_tour/test/controllers/favorite_restaurant_view_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:dio/dio.dart' as _i2;
import 'package:hive/hive.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:restaurant_tour/data/restaurant_data_source.dart' as _i4;
import 'package:restaurant_tour/models/restaurant_data.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDio_0 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCompleter_1<T> extends _i1.SmartFake implements _i3.Completer<T> {
  _FakeCompleter_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RemoteRestaurantDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteRestaurantDataSource extends _i1.Mock implements _i4.RemoteRestaurantDataSource {
  @override
  _i2.Dio get source => (super.noSuchMethod(
        Invocation.getter(#source),
        returnValue: _FakeDio_0(
          this,
          Invocation.getter(#source),
        ),
        returnValueForMissingStub: _FakeDio_0(
          this,
          Invocation.getter(#source),
        ),
      ) as _i2.Dio);

  @override
  _i3.Future<List<_i5.RestaurantData>> getRestaurants({
    required int? offset,
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRestaurants,
          [],
          {
            #offset: offset,
            #limit: limit,
          },
        ),
        returnValue: _i3.Future<List<_i5.RestaurantData>>.value(<_i5.RestaurantData>[]),
        returnValueForMissingStub: _i3.Future<List<_i5.RestaurantData>>.value(<_i5.RestaurantData>[]),
      ) as _i3.Future<List<_i5.RestaurantData>>);

  @override
  _i3.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> addRestaurants({required _i4.RestaurantPage? page}) => (super.noSuchMethod(
        Invocation.method(
          #addRestaurants,
          [],
          {#page: page},
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i5.RestaurantReviewData>> getReviewsForRestaurant({required String? restaurantId}) => (super.noSuchMethod(
        Invocation.method(
          #getReviewsForRestaurant,
          [],
          {#restaurantId: restaurantId},
        ),
        returnValue: _i3.Future<List<_i5.RestaurantReviewData>>.value(<_i5.RestaurantReviewData>[]),
        returnValueForMissingStub: _i3.Future<List<_i5.RestaurantReviewData>>.value(<_i5.RestaurantReviewData>[]),
      ) as _i3.Future<List<_i5.RestaurantReviewData>>);
}

/// A class which mocks [InStorageRestaurantDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockInStorageRestaurantDataSource extends _i1.Mock implements _i4.InStorageRestaurantDataSource {
  @override
  _i3.Completer<_i6.LazyBox<String>> get boxInitializer => (super.noSuchMethod(
        Invocation.getter(#boxInitializer),
        returnValue: _FakeCompleter_1<_i6.LazyBox<String>>(
          this,
          Invocation.getter(#boxInitializer),
        ),
        returnValueForMissingStub: _FakeCompleter_1<_i6.LazyBox<String>>(
          this,
          Invocation.getter(#boxInitializer),
        ),
      ) as _i3.Completer<_i6.LazyBox<String>>);

  @override
  set boxInitializer(_i3.Completer<_i6.LazyBox<String>>? _boxInitializer) => super.noSuchMethod(
        Invocation.setter(
          #boxInitializer,
          _boxInitializer,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> addRestaurants({required _i4.RestaurantPage? page}) => (super.noSuchMethod(
        Invocation.method(
          #addRestaurants,
          [],
          {#page: page},
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i5.RestaurantData>> getRestaurants({
    required int? offset,
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRestaurants,
          [],
          {
            #offset: offset,
            #limit: limit,
          },
        ),
        returnValue: _i3.Future<List<_i5.RestaurantData>>.value(<_i5.RestaurantData>[]),
        returnValueForMissingStub: _i3.Future<List<_i5.RestaurantData>>.value(<_i5.RestaurantData>[]),
      ) as _i3.Future<List<_i5.RestaurantData>>);

  @override
  _i3.Future<List<_i5.RestaurantReviewData>> getReviewsForRestaurant({required String? restaurantId}) => (super.noSuchMethod(
        Invocation.method(
          #getReviewsForRestaurant,
          [],
          {#restaurantId: restaurantId},
        ),
        returnValue: _i3.Future<List<_i5.RestaurantReviewData>>.value(<_i5.RestaurantReviewData>[]),
        returnValueForMissingStub: _i3.Future<List<_i5.RestaurantReviewData>>.value(<_i5.RestaurantReviewData>[]),
      ) as _i3.Future<List<_i5.RestaurantReviewData>>);
}
